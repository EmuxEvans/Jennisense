   1               		.file	"HIDClassDevice.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.HID_Device_ProcessControlRequest,"ax",@progbits
  11               	.global	HID_Device_ProcessControlRequest
  13               	HID_Device_ProcessControlRequest:
  14               	.LFB99:
  15               		.file 1 "lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c"
   1:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** /*
   2:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c ****              LUFA Library
   3:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c ****      Copyright (C) Dean Camera, 2011.
   4:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 
   5:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c ****   dean [at] fourwalledcubicle [dot] com
   6:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c ****            www.lufa-lib.org
   7:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** */
   8:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 
   9:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** /*
  10:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c ****   Copyright 2011  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 
  12:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c ****   Permission to use, copy, modify, distribute, and sell this
  13:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c ****   software and its documentation for any purpose is hereby granted
  14:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c ****   without fee, provided that the above copyright notice appear in
  15:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c ****   all copies and that both that the copyright notice and this
  16:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c ****   permission notice and warranty disclaimer appear in supporting
  17:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c ****   documentation, and that the name of the author not be used in
  18:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c ****   advertising or publicity pertaining to distribution of the
  19:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c ****   software without specific, written prior permission.
  20:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 
  21:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c ****   The author disclaim all warranties with regard to this
  22:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c ****   software, including all implied warranties of merchantability
  23:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c ****   and fitness.  In no event shall the author be liable for any
  24:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c ****   special, indirect or consequential damages or any damages
  25:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c ****   in an action of contract, negligence or other tortious action,
  27:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c ****   arising out of or in connection with the use or performance of
  28:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c ****   this software.
  29:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** */
  30:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 
  31:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** #define  __INCLUDE_FROM_USB_DRIVER
  32:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** #include "../../Core/USBMode.h"
  33:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 
  34:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** #if defined(USB_CAN_BE_DEVICE)
  35:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 
  36:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** #define  __INCLUDE_FROM_HID_DRIVER
  37:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** #define  __INCLUDE_FROM_HID_DEVICE_C
  38:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** #include "HIDClassDevice.h"
  39:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 
  40:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
  41:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** {
  16               		.loc 1 41 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 6F92      		push r6
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 6, -2
  23 0002 7F92      		push r7
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 7, -3
  27 0004 8F92      		push r8
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 5
  30               		.cfi_offset 8, -4
  31 0006 9F92      		push r9
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 6
  34               		.cfi_offset 9, -5
  35 0008 AF92      		push r10
  36               	.LCFI4:
  37               		.cfi_def_cfa_offset 7
  38               		.cfi_offset 10, -6
  39 000a BF92      		push r11
  40               	.LCFI5:
  41               		.cfi_def_cfa_offset 8
  42               		.cfi_offset 11, -7
  43 000c CF92      		push r12
  44               	.LCFI6:
  45               		.cfi_def_cfa_offset 9
  46               		.cfi_offset 12, -8
  47 000e DF92      		push r13
  48               	.LCFI7:
  49               		.cfi_def_cfa_offset 10
  50               		.cfi_offset 13, -9
  51 0010 EF92      		push r14
  52               	.LCFI8:
  53               		.cfi_def_cfa_offset 11
  54               		.cfi_offset 14, -10
  55 0012 FF92      		push r15
  56               	.LCFI9:
  57               		.cfi_def_cfa_offset 12
  58               		.cfi_offset 15, -11
  59 0014 0F93      		push r16
  60               	.LCFI10:
  61               		.cfi_def_cfa_offset 13
  62               		.cfi_offset 16, -12
  63 0016 1F93      		push r17
  64               	.LCFI11:
  65               		.cfi_def_cfa_offset 14
  66               		.cfi_offset 17, -13
  67 0018 CF93      		push r28
  68               	.LCFI12:
  69               		.cfi_def_cfa_offset 15
  70               		.cfi_offset 28, -14
  71 001a DF93      		push r29
  72               	.LCFI13:
  73               		.cfi_def_cfa_offset 16
  74               		.cfi_offset 29, -15
  75 001c 00D0      		rcall .
  76 001e 1F92      		push __zero_reg__
  77               	.LCFI14:
  78               		.cfi_def_cfa_offset 19
  79 0020 CDB7      		in r28,__SP_L__
  80 0022 DEB7      		in r29,__SP_H__
  81               	.LCFI15:
  82               		.cfi_def_cfa_register 28
  83               	/* prologue: function */
  84               	/* frame size = 3 */
  85               	/* stack size = 17 */
  86               	.L__stack_usage = 17
  87 0024 7C01      		movw r14,r24
  42:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 	if (!(Endpoint_IsSETUPReceived()))
  43:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 	  return;
  44:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 
  45:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
  46:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 	  return;
  47:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 
  48:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 	switch (USB_ControlRequest.bRequest)
  49:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 	{
  50:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 		case HID_REQ_GetReport:
  51:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE)
  52:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 			{
  53:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				uint16_t ReportSize = 0;
  54:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
  55:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
  56:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
  57:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 
  58:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				memset(ReportData, 0, sizeof(ReportData));
  59:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 
  60:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &Repor
  61:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 
  62:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
  63:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				{
  64:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
  65:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 					       HIDInterfaceInfo->Config.PrevReportINBufferSize);
  66:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				}
  67:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 
  68:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
  69:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 
  70:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				Endpoint_ClearSETUP();
  71:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
  72:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				Endpoint_ClearOUT();
  73:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 			}
  74:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 
  75:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 			break;
  76:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 		case HID_REQ_SetReport:
  77:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE)
  78:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 			{
  79:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				uint16_t ReportSize = USB_ControlRequest.wLength;
  80:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
  81:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
  82:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				uint8_t  ReportData[ReportSize];
  83:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 
  84:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				Endpoint_ClearSETUP();
  85:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
  86:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				Endpoint_ClearIN();
  87:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 
  88:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
  89:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 
  90:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 			}
  91:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 
  92:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 			break;
  93:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 		case HID_REQ_GetProtocol:
  94:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE)
  95:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 			{
  96:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				Endpoint_ClearSETUP();
  97:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				while (!(Endpoint_IsINReady()));
  98:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
  99:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				Endpoint_ClearIN();
 100:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				Endpoint_ClearStatusStage();
 101:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 			}
 102:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 
 103:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 			break;
 104:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 		case HID_REQ_SetProtocol:
 105:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE)
 106:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 			{
 107:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				Endpoint_ClearSETUP();
 108:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				Endpoint_ClearStatusStage();
 109:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 
 110:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
 111:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 			}
 112:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 
 113:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 			break;
 114:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 		case HID_REQ_SetIdle:
 115:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE)
 116:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 			{
 117:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				Endpoint_ClearSETUP();
 118:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				Endpoint_ClearStatusStage();
 119:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 
 120:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
 121:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 			}
 122:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 
 123:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 			break;
 124:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 		case HID_REQ_GetIdle:
 125:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE)
 126:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 			{
 127:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				Endpoint_ClearSETUP();
 128:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				while (!(Endpoint_IsINReady()));
 129:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
 130:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				Endpoint_ClearIN();
 131:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				Endpoint_ClearStatusStage();
 132:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 			}
 133:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 
 134:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 			break;
 135:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 	}
 136:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** }
  88               		.loc 1 136 0
  89 0026 ADB6      		in r10,__SP_L__
  90 0028 BEB6      		in r11,__SP_H__
  91               	.LBB53:
  92               	.LBB54:
  93               		.file 2 "lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h"
   1:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
   2:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****              LUFA Library
   3:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****      Copyright (C) Dean Camera, 2011.
   4:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   5:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****            www.lufa-lib.org
   7:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
   8:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   9:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
  10:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Copyright 2011  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  12:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   all copies and that both that the copyright notice and this
  16:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   documentation, and that the name of the author not be used in
  18:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software without specific, written prior permission.
  20:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  21:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   The author disclaim all warranties with regard to this
  22:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software, including all implied warranties of merchantability
  23:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   special, indirect or consequential damages or any damages
  25:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   arising out of or in connection with the use or performance of
  28:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   this software.
  29:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
  30:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  31:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \file
  32:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief USB Endpoint definitions for the AVR8 microcontrollers.
  33:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \copydetails Group_EndpointManagement_AVR8
  34:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  35:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  38:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  39:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointRW
  40:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointRW_AVR8 Endpoint Data Reading and Writing (AVR8)
  41:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint data read/write definitions for the Atmel AVR8 architecture.
  42:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  43:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing from and to e
  44:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  45:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  46:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPrimitiveRW
  47:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPrimitiveRW_AVR8 Read/Write of Primitive Data Types (AVR8)
  48:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint primitive read/write definitions for the Atmel AVR8 architecture.
  49:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  50:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of primitive 
  51:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  from and to endpoints.
  52:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  53:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  54:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPacketManagement
  55:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPacketManagement_AVR8 Endpoint Packet Management (AVR8)
  56:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint packet management definitions for the Atmel AVR8 architecture.
  57:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  58:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to packet management of endpoints.
  59:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  60:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  61:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointManagement
  62:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointManagement_AVR8 Endpoint Management (AVR8)
  63:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint management definitions for the Atmel AVR8 architecture.
  64:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  65:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros and enums related to endpoint management when in USB Device mode. This
  66:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  module contains the endpoint management macros, as well as endpoint interrupt and data
  67:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  send/receive functions for various data types.
  68:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  69:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  @{
  70:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  71:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  72:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** #ifndef __ENDPOINT_AVR8_H__
  73:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** #define __ENDPOINT_AVR8_H__
  74:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  75:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Includes: */
  76:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../../../../Common/Common.h"
  77:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBTask.h"
  78:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBInterrupt.h"
  79:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  80:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  81:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if defined(__cplusplus)
  82:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			extern "C" {
  83:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  84:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  85:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Preprocessor Checks: */
  86:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  87:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  88:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  89:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  90:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Private Interface - For use in library only: */
  91:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#if !defined(__DOXYGEN__)
  92:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */
  93:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_MAXSIZE(EPIndex)         _ENDPOINT_GET_MAXSIZE2(ENDPOINT_DETAILS_EP ## EPI
  94:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_MAXSIZE2(EPDetails)      _ENDPOINT_GET_MAXSIZE3(EPDetails)
  95:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_MAXSIZE3(MaxSize, Banks) (MaxSize)
  96:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  97:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_BANKS(EPIndex)           _ENDPOINT_GET_BANKS2(ENDPOINT_DETAILS_EP ## EPInd
  98:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_BANKS2(EPDetails)        _ENDPOINT_GET_BANKS3(EPDetails)
  99:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_BANKS3(MaxSize, Banks)   (Banks)
 100:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 101:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 102:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_MAXEP             7
 103:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 104:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP0               64,  1
 105:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP1               256, 2
 106:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP2               64,  2
 107:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP3               64,  2
 108:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP4               64,  2
 109:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP5               64,  2
 110:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP6               64,  2
 111:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 112:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_MAXEP             5
 113:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 114:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP0               64,  1
 115:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP1               64,  1
 116:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP2               64,  1
 117:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP3               64,  2
 118:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP4               64,  2
 119:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 120:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 121:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 122:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT A
 123:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                                                       ATTR_ALWAYS_INLINE;
 124:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
 125:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 126:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t  MaskVal    = 0;
 127:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint16_t CheckBytes = 8;
 128:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 129:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (CheckBytes < Bytes)
 130:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 131:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					MaskVal++;
 132:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					CheckBytes <<= 1;
 133:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 134:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 135:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (MaskVal << EPSIZE0);
 136:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 137:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 138:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Function Prototypes: */
 139:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			void Endpoint_ClearEndpoints(void);
 140:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
 141:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG0XData,
 142:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG1XData);
 143:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 144:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#endif
 145:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 146:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Public Interface - May be used in end-application: */
 147:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */
 148:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** \name Endpoint Bank Mode Masks */
 149:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			//@{
 150:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 151:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  that the endpoint should have one single bank, which requires less USB FIFO memory but resul
 152:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  in slower transfers as only one USB device (the AVR or the host) can access the endpoint's
 153:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank at the one time.
 154:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 155:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_BANK_SINGLE                    (0 << EPBK0)
 156:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 157:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 158:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  that the endpoint should have two banks, which requires more USB FIFO memory but results
 159:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  in faster transfers as one USB device (the AVR or the host) can access one bank while the ot
 160:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  accesses the second bank.
 161:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 162:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_BANK_DOUBLE                    (1 << EPBK0)
 163:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			//@}
 164:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 165:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 166:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Default size of the default control endpoint's bank, until altered by the control endpoint 
 167:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  value in the device descriptor. Not available if the \c FIXED_CONTROL_ENDPOINT_SIZE token i
 168:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 169:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_CONTROLEP_DEFAULT_SIZE     8
 170:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 171:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 172:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the maximum bank size in bytes of a given endpoint.
 173:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 174:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This macro will only work correctly on endpoint indexes that are compile-time constant
 175:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        defined by the preprocessor.
 176:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 177:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EPIndex  Endpoint number, a value between 0 and (\ref ENDPOINT_TOTAL_ENDPOINTS - 
 178:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 179:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_MAX_SIZE(EPIndex)              _ENDPOINT_GET_MAXSIZE(EPIndex)
 180:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 181:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the total number of banks supported by the given endpoint.
 182:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 183:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This macro will only work correctly on endpoint indexes that are compile-time constant
 184:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        defined by the preprocessor.
 185:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 186:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EPIndex  Endpoint number, a value between 0 and (\ref ENDPOINT_TOTAL_ENDPOINTS - 
 187:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 188:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_BANKS_SUPPORTED(EPIndex)       _ENDPOINT_GET_BANKS(EPIndex)
 189:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 190:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if !defined(CONTROL_ONLY_DEVICE) || defined(__DOXYGEN__)
 191:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Total number of endpoints (including the default control endpoint at address 0) which may
 192:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  be used in the device. Different USB AVR models support different amounts of endpoints,
 193:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  this value reflects the maximum number of endpoints for the currently selected AVR model.
 194:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 195:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            ENDPOINT_DETAILS_MAXEP
 196:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 197:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            1
 198:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 199:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 200:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Enums: */
 201:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enum for the possible error return codes of the \ref Endpoint_WaitUntilReady() function.
 202:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 203:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 204:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 205:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			enum Endpoint_WaitUntilReady_ErrorCodes_t
 206:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 207:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_NoError                 = 0, /**< Endpoint is ready for next packet, no erro
 208:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_EndpointStalled         = 1, /**< The endpoint was stalled during the stream
 209:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   transfer by the host or device.
 210:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 211:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_DeviceDisconnected      = 2,	/**< Device was disconnected from the host whil
 212:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   waiting for the endpoint to become ready.
 213:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 214:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_BusSuspended            = 3, /**< The USB bus has been suspended by the host
 215:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   no USB endpoint traffic can occur until th
 216:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   has resumed.
 217:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 218:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_Timeout                 = 4, /**< The host failed to accept or send the next
 219:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   within the software timeout period set by 
 220:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   \ref USB_STREAM_TIMEOUT_MS macro.
 221:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 222:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_TransmissionInProgress  = 5, /**< The bank for the USB endpoint is currently
 223:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****                                                          *   and can't be written at the moment.
 224:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 225:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 226:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			};
 227:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 228:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 229:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Configures the specified endpoint number with the given endpoint type, direction, bank size
 230:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and banking mode. Once configured, the endpoint may be read from or written to, depending
 231:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  on its direction.
 232:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 233:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Number     Endpoint number to configure. This must be more than 0 and less than
 234:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        \ref ENDPOINT_TOTAL_ENDPOINTS.
 235:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 236:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Type       Type of endpoint to configure, a \c EP_TYPE_* mask. Not all endpoint t
 237:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        are available on Low Speed USB devices - refer to the USB 2.0 specific
 238:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 239:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Direction  Endpoint data direction, either \ref ENDPOINT_DIR_OUT or \ref ENDPOINT
 240:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        All endpoints (except Control type) are unidirectional - data may only
 241:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        from or written to the endpoint bank based on its direction, not both.
 242:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 243:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Size       Size of the endpoint's bank, where packets are stored before they are 
 244:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        to the USB host, or after they have been received from the USB host (d
 245:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        the endpoint's data direction). The bank size must indicate the maximu
 246:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        that the endpoint can handle.
 247:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 248:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Banks      Number of banks to use for the endpoint being configured, an \c ENDPOI
 249:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        More banks uses more USB DPRAM, but offers better performance. Isochro
 250:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        endpoints <b>must</b> have at least two banks.
 251:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 252:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note When the \c ORDERED_EP_CONFIG compile time option is used, Endpoints <b>must</b> be co
 253:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        ascending order, or bank corruption will occur.
 254:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 255:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 256:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Different endpoints may have different maximum packet sizes based on the endpoint's in
 257:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        the chosen microcontroller model's datasheet to determine the maximum bank size for ea
 258:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 259:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 260:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The default control endpoint should not be manually configured by the user application
 261:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        it is automatically configured by the library internally.
 262:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 263:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 264:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This routine will automatically select the specified endpoint upon success. Upon failu
 265:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        which failed to reconfigure correctly will be selected.
 266:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 267:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the configuration succeeded, \c false otherwise.
 268:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 269:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Number,
 270:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 271:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Direction,
 272:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 273:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks) ATTR_ALWAYS_INLINE;
 274:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Number,
 275:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 276:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Direction,
 277:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 278:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks)
 279:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 280:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 
 281:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMask(Size))
 282:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 283:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 284:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Indicates the number of bytes currently stored in the current endpoint's selected bank.
 285:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 286:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The return width of this function may differ, depending on the maximum endpoint bank s
 287:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        of the selected AVR model.
 288:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 289:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 290:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 291:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
 292:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 293:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
 294:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void)
 295:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 296:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 297:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCX;
 298:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_4_AVR)
 299:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 300:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_2_AVR)
 301:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCLX;
 302:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 303:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 304:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 305:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Get the endpoint address of the currently selected endpoint. This is typically used to save
 306:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint number so that it can be restored after another endpoint has
 307:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  been manipulated.
 308:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 309:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Index of the currently selected endpoint.
 310:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 311:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLI
 312:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
 313:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 314:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 315:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (UENUM & ENDPOINT_EPNUM_MASK);
 316:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 317:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ENDPOINT_CONTROLEP;
 318:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 319:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 320:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 321:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Selects the given endpoint number. If the address from the device descriptors is used, the
 322:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  value should be masked with the \ref ENDPOINT_EPNUM_MASK constant to extract only the endpoi
 323:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  number (and discarding the endpoint direction bit).
 324:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 325:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  Any endpoint operations which do not require the endpoint number to be indicated will operat
 326:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint.
 327:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 328:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EndpointNumber Endpoint number to select.
 329:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 330:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 331:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
 332:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 333:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 334:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = EndpointNumber;
 335:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 336:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 337:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 338:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the endpoint bank FIFO. This clears all the endpoint banks and resets the USB control
 339:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  data In and Out pointers to the bank's contents.
 340:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 341:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
 342:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 343:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 344:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
 345:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 346:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = (1 << EndpointNumber);
 347:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = 0;
 348:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 349:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 350:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enables the currently selected endpoint so that data can be sent and received through it to
 351:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and from a host.
 352:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 353:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
 354:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 355:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
 356:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void)
 357:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 358:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << EPEN);
 359:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 360:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 361:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Disables the currently selected endpoint so that data cannot be sent and received through it
 362:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  to and from a host.
 363:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 364:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
 365:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void)
 366:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 367:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX &= ~(1 << EPEN);
 368:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 369:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 370:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is enabled, but not necessarily configured.
 371:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 372:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
 373:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 374:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 375:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void)
 376:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 377:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << EPEN)) ? true : false);
 378:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 379:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 380:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the number of busy banks in the currently selected endpoint, which have been queue
 381:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  transmission via the \ref Endpoint_ClearIN() command, or are awaiting acknowledgement via th
 382:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ref Endpoint_ClearOUT() command.
 383:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 384:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 385:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 386:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of busy banks in the selected endpoint.
 387:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 388:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
 389:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void)
 390:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 391:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UESTA0X & (0x03 << NBUSYBK0));
 392:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 393:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 394:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Aborts all pending IN transactions on the currently selected endpoint, once the bank
 395:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  has been queued for transmission to the host via \ref Endpoint_ClearIN(). This function
 396:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  will terminate all queued transactions, resetting the endpoint banks ready for a new
 397:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  packet.
 398:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 399:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 400:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 401:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_AbortPendingIN(void)
 402:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 403:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (Endpoint_GetBusyBanks() != 0)
 404:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 405:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX |= (1 << RXOUTI);
 406:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					while (UEINTX & (1 << RXOUTI));
 407:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 408:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 409:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 410:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint may be read from (if data is waiting in the en
 411:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank and the endpoint is an OUT direction, or if the bank is not yet full if the endpoint is
 412:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction). This function will return false if an error has occurred in the endpoint, if the
 413:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is an OUT direction and no packet (or an empty packet) has been received, or if the endpoint
 414:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction and the endpoint bank is full.
 415:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 416:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 417:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 418:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint may be read from or written to, d
 419:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *          on its direction.
 420:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 421:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 422:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void)
 423:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 424:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 425:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 426:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 427:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is configured.
 428:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 429:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false oth
 430:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 431:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 432:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void)
 433:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 434:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 435:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 436:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 437:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Returns a mask indicating which INTERRUPT type endpoints have interrupted - i.e. their
 438:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  interrupt duration has elapsed. Which endpoints have interrupted can be determined by
 439:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  masking the return value against <tt>(1 << <i>{Endpoint Number}</i>)</tt>.
 440:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 441:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Mask whose bits indicate which endpoints have interrupted.
 442:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 443:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_I
 444:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void)
 445:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 446:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEINT;
 447:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 448:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 449:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the specified endpoint number has interrupted (valid only for INTERRUPT type
 450:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoints).
 451:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 452:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EndpointNumber  Index of the endpoint whose interrupt flag should be tested.
 453:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 454:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the specified endpoint has interrupted, \c false otherwise.
 455:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 456:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber) ATTR_WARN_UNUSE
 457:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber)
 458:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 459:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((Endpoint_GetEndpointInterrupts() & (1 << EndpointNumber)) ? true : false);
 460:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 461:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 462:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected IN endpoint is ready for a new packet to be sent to the host.
 463:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 464:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 465:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 466:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwis
 467:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 468:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 469:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void)
 470:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 471:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 472:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 473:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 474:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected OUT endpoint has received new packet from the host.
 475:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 476:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 477:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 478:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwis
 479:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 480:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 481:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void)
 482:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 483:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 484:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 485:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 486:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the current CONTROL type endpoint has received a SETUP packet.
 487:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 488:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 489:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 490:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false other
 491:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 492:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 493:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void)
 494:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 495:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXSTPI)) ? true : false);
  94               		.loc 2 495 0
  95 002a 8091 E800 		lds r24,232
  96               	.LVL1:
  97               	.LBE54:
  98               	.LBE53:
  42:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 	if (!(Endpoint_IsSETUPReceived()))
  99               		.loc 1 42 0
 100 002e 83FF      		sbrs r24,3
 101 0030 00C0      		rjmp .L1
  45:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
 102               		.loc 1 45 0
 103 0032 F701      		movw r30,r14
 104 0034 8081      		ld r24,Z
 105 0036 90E0      		ldi r25,0
 106 0038 2091 0000 		lds r18,USB_ControlRequest+4
 107 003c 3091 0000 		lds r19,USB_ControlRequest+4+1
 108 0040 2817      		cp r18,r24
 109 0042 3907      		cpc r19,r25
 110 0044 01F0      		breq .+2
 111 0046 00C0      		rjmp .L1
  48:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 	switch (USB_ControlRequest.bRequest)
 112               		.loc 1 48 0
 113 0048 8091 0000 		lds r24,USB_ControlRequest+1
 114 004c 8330      		cpi r24,lo8(3)
 115 004e 01F4      		brne .+2
 116 0050 00C0      		rjmp .L5
 117 0052 00F4      		brsh .L9
 118 0054 8130      		cpi r24,lo8(1)
 119 0056 01F0      		breq .L3
 120 0058 8230      		cpi r24,lo8(2)
 121 005a 01F0      		breq .+2
 122 005c 00C0      		rjmp .L1
 123 005e 00C0      		rjmp .L4
 124               	.L9:
 125 0060 8A30      		cpi r24,lo8(10)
 126 0062 01F4      		brne .+2
 127 0064 00C0      		rjmp .L7
 128 0066 8B30      		cpi r24,lo8(11)
 129 0068 01F4      		brne .+2
 130 006a 00C0      		rjmp .L8
 131 006c 8930      		cpi r24,lo8(9)
 132 006e 01F0      		breq .+2
 133 0070 00C0      		rjmp .L1
 134 0072 00C0      		rjmp .L6
 135               	.L3:
  51:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE)
 136               		.loc 1 51 0
 137 0074 8091 0000 		lds r24,USB_ControlRequest
 138 0078 813A      		cpi r24,lo8(-95)
 139 007a 01F0      		breq .+2
 140 007c 00C0      		rjmp .L1
 141 007e 8DB6      		in r8,__SP_L__
 142 0080 9EB6      		in r9,__SP_H__
 143               	.LBB55:
  53:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				uint16_t ReportSize = 0;
 144               		.loc 1 53 0
 145 0082 1A82      		std Y+2,__zero_reg__
 146 0084 1982      		std Y+1,__zero_reg__
 147               	.LVL2:
  54:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
 148               		.loc 1 54 0
 149 0086 8091 0000 		lds r24,USB_ControlRequest+2
 150 008a 1091 0000 		lds r17,USB_ControlRequest+3
 151 008e 8B83      		std Y+3,r24
 152               	.LVL3:
  56:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
 153               		.loc 1 56 0
 154 0090 F701      		movw r30,r14
 155 0092 4781      		ldd r20,Z+7
 156 0094 8DB7      		in r24,__SP_L__
 157 0096 9EB7      		in r25,__SP_H__
 158 0098 841B      		sub r24,r20
 159 009a 9109      		sbc r25,__zero_reg__
 160 009c 0FB6      		in __tmp_reg__,__SREG__
 161 009e F894      		cli
 162 00a0 9EBF      		out __SP_H__,r25
 163 00a2 0FBE      		out __SREG__,__tmp_reg__
 164 00a4 8DBF      		out __SP_L__,r24
 165 00a6 CDB6      		in r12,__SP_L__
 166 00a8 DEB6      		in r13,__SP_H__
 167 00aa EFEF      		ldi r30,-1
 168 00ac CE1A      		sub r12,r30
 169 00ae DE0A      		sbc r13,r30
  58:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				memset(ReportData, 0, sizeof(ReportData));
 170               		.loc 1 58 0
 171 00b0 3601      		movw r6,r12
 172 00b2 50E0      		ldi r21,0
 173 00b4 60E0      		ldi r22,0
 174 00b6 70E0      		ldi r23,0
 175 00b8 C601      		movw r24,r12
 176 00ba 0E94 0000 		call memset
 177               	.LVL4:
  55:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
 178               		.loc 1 55 0
 179 00be 412F      		mov r20,r17
 180 00c0 4150      		subi r20,lo8(-(-1))
 181               	.LVL5:
  60:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &Repor
 182               		.loc 1 60 0
 183 00c2 8E01      		movw r16,r28
 184 00c4 0F5F      		subi r16,-1
 185 00c6 1F4F      		sbci r17,-1
 186 00c8 9601      		movw r18,r12
 187 00ca BE01      		movw r22,r28
 188 00cc 6D5F      		subi r22,-3
 189 00ce 7F4F      		sbci r23,-1
 190 00d0 C701      		movw r24,r14
 191 00d2 0E94 0000 		call CALLBACK_HID_Device_CreateHIDReport
 192               	.LVL6:
  62:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
 193               		.loc 1 62 0
 194 00d6 F701      		movw r30,r14
 195 00d8 2581      		ldd r18,Z+5
 196 00da 3681      		ldd r19,Z+6
 197 00dc 2115      		cp r18,__zero_reg__
 198 00de 3105      		cpc r19,__zero_reg__
 199 00e0 01F0      		breq .L10
  64:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
 200               		.loc 1 64 0
 201 00e2 4781      		ldd r20,Z+7
 202 00e4 50E0      		ldi r21,0
 203 00e6 B601      		movw r22,r12
 204 00e8 C901      		movw r24,r18
 205 00ea 0E94 0000 		call memcpy
 206               	.LVL7:
 207               	.L10:
 208               	.LBB56:
 209               	.LBB57:
 334:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = EndpointNumber;
 210               		.loc 2 334 0
 211 00ee 1092 E900 		sts 233,__zero_reg__
 212               	.LBE57:
 213               	.LBE56:
 214               	.LBB58:
 215               	.LBB59:
 496:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 497:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 498:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears a received SETUP packet on the currently selected CONTROL type endpoint, freeing up t
 499:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint for the next packet.
 500:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 501:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 502:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 503:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This is not applicable for non CONTROL type endpoints.
 504:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 505:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
 506:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void)
 507:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 508:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 216               		.loc 2 508 0
 217 00f2 2091 E800 		lds r18,232
 218 00f6 277F      		andi r18,lo8(-9)
 219 00f8 2093 E800 		sts 232,r18
 220               	.LBE59:
 221               	.LBE58:
  71:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
 222               		.loc 1 71 0
 223 00fc 6981      		ldd r22,Y+1
 224 00fe 7A81      		ldd r23,Y+2
 225 0100 C301      		movw r24,r6
 226 0102 0E94 0000 		call Endpoint_Write_Control_Stream_LE
 227               	.LVL8:
 228               	.LBB60:
 229               	.LBB61:
 509:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 510:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 511:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sends an IN packet to the host on the currently selected endpoint, freeing up the endpoint f
 512:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  next packet and switching to the alternative endpoint bank if double banked.
 513:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 514:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 515:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 516:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
 517:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void)
 518:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 519:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 520:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 521:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 522:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << TXINI);
 523:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 524:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 525:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 526:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Acknowledges an OUT packet to the host on the currently selected endpoint, freeing up the en
 527:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  for the next packet and switching to the alternative endpoint bank if double banked.
 528:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 529:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 530:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 531:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
 532:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void)
 533:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 534:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 535:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 230               		.loc 2 535 0
 231 0106 8091 E800 		lds r24,232
 232 010a 8B77      		andi r24,lo8(123)
 233 010c 8093 E800 		sts 232,r24
 234 0110 382D      		mov r19,r8
 235 0112 292D      		mov r18,r9
 236 0114 00C0      		rjmp .L29
 237               	.LVL9:
 238               	.L6:
 239               	.LBE61:
 240               	.LBE60:
 241               	.LBE55:
  77:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE)
 242               		.loc 1 77 0
 243 0116 8091 0000 		lds r24,USB_ControlRequest
 244 011a 8132      		cpi r24,lo8(33)
 245 011c 01F0      		breq .+2
 246 011e 00C0      		rjmp .L1
 247 0120 7DB6      		in r7,__SP_L__
 248 0122 8EB6      		in r8,__SP_H__
 249               	.LBB62:
  79:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				uint16_t ReportSize = USB_ControlRequest.wLength;
 250               		.loc 1 79 0
 251 0124 0091 0000 		lds r16,USB_ControlRequest+6
 252 0128 1091 0000 		lds r17,USB_ControlRequest+6+1
 253               	.LVL10:
  80:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
 254               		.loc 1 80 0
 255 012c 9090 0000 		lds r9,USB_ControlRequest+2
 256 0130 6090 0000 		lds r6,USB_ControlRequest+3
 257               	.LVL11:
  82:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				uint8_t  ReportData[ReportSize];
 258               		.loc 1 82 0
 259 0134 8DB7      		in r24,__SP_L__
 260 0136 9EB7      		in r25,__SP_H__
 261 0138 801B      		sub r24,r16
 262 013a 910B      		sbc r25,r17
 263 013c 0FB6      		in __tmp_reg__,__SREG__
 264 013e F894      		cli
 265 0140 9EBF      		out __SP_H__,r25
 266 0142 0FBE      		out __SREG__,__tmp_reg__
 267 0144 8DBF      		out __SP_L__,r24
 268 0146 CDB6      		in r12,__SP_L__
 269 0148 DEB6      		in r13,__SP_H__
 270 014a EFEF      		ldi r30,-1
 271 014c CE1A      		sub r12,r30
 272 014e DE0A      		sbc r13,r30
 273               	.LVL12:
 274               	.LBB63:
 275               	.LBB64:
 508:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 276               		.loc 2 508 0
 277 0150 8091 E800 		lds r24,232
 278 0154 877F      		andi r24,lo8(-9)
 279 0156 8093 E800 		sts 232,r24
 280               	.LBE64:
 281               	.LBE63:
  85:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
 282               		.loc 1 85 0
 283 015a B801      		movw r22,r16
 284 015c C601      		movw r24,r12
 285 015e 0E94 0000 		call Endpoint_Read_Control_Stream_LE
 286               	.LVL13:
 287               	.LBB65:
 288               	.LBB66:
 520:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 289               		.loc 2 520 0
 290 0162 8091 E800 		lds r24,232
 291 0166 8E77      		andi r24,lo8(126)
 292 0168 8093 E800 		sts 232,r24
  88:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
 293               		.loc 1 88 0
 294 016c 21E0      		ldi r18,lo8(1)
 295 016e 9110      		cpse r9,__zero_reg__
 296 0170 00C0      		rjmp .L11
 297 0172 20E0      		ldi r18,0
 298               	.L11:
 299               	.LBE66:
 300               	.LBE65:
 301 0174 30E0      		ldi r19,0
 302 0176 021B      		sub r16,r18
 303 0178 130B      		sbc r17,r19
 304               	.LVL14:
  89:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 
 305               		.loc 1 89 0
 306 017a 2C0D      		add r18,r12
 307 017c 3D1D      		adc r19,r13
  81:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
 308               		.loc 1 81 0
 309 017e 462D      		mov r20,r6
 310 0180 4150      		subi r20,lo8(-(-1))
  88:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
 311               		.loc 1 88 0
 312 0182 692D      		mov r22,r9
 313 0184 C701      		movw r24,r14
 314 0186 0E94 0000 		call CALLBACK_HID_Device_ProcessHIDReport
 315               	.LVL15:
 316 018a 372D      		mov r19,r7
 317 018c 282D      		mov r18,r8
 318               	.LVL16:
 319               	.L29:
 320 018e 832F      		mov r24,r19
 321 0190 922F      		mov r25,r18
 322 0192 0FB6      		in __tmp_reg__,__SREG__
 323 0194 F894      		cli
 324 0196 9EBF      		out __SP_H__,r25
 325 0198 0FBE      		out __SREG__,__tmp_reg__
 326 019a 8DBF      		out __SP_L__,r24
 327 019c 00C0      		rjmp .L1
 328               	.LVL17:
 329               	.L5:
 330               	.LBE62:
  94:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE)
 331               		.loc 1 94 0
 332 019e 8091 0000 		lds r24,USB_ControlRequest
 333 01a2 813A      		cpi r24,lo8(-95)
 334 01a4 01F0      		breq .+2
 335 01a6 00C0      		rjmp .L1
 336               	.LBB67:
 337               	.LBB68:
 508:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 338               		.loc 2 508 0
 339 01a8 8091 E800 		lds r24,232
 340 01ac 877F      		andi r24,lo8(-9)
 341 01ae 8093 E800 		sts 232,r24
 342               	.L12:
 343               	.LBE68:
 344               	.LBE67:
 345               	.LBB69:
 346               	.LBB70:
 471:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 347               		.loc 2 471 0 discriminator 1
 348 01b2 8091 E800 		lds r24,232
 349               	.LBE70:
 350               	.LBE69:
  97:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				while (!(Endpoint_IsINReady()));
 351               		.loc 1 97 0 discriminator 1
 352 01b6 80FF      		sbrs r24,0
 353 01b8 00C0      		rjmp .L12
  98:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
 354               		.loc 1 98 0
 355 01ba F701      		movw r30,r14
 356 01bc 8085      		ldd r24,Z+8
 357               	.LVL18:
 358 01be 00C0      		rjmp .L30
 359               	.LVL19:
 360               	.L8:
 105:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE)
 361               		.loc 1 105 0
 362 01c0 8091 0000 		lds r24,USB_ControlRequest
 363 01c4 8132      		cpi r24,lo8(33)
 364 01c6 01F0      		breq .+2
 365 01c8 00C0      		rjmp .L1
 366               	.LBB71:
 367               	.LBB72:
 508:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 368               		.loc 2 508 0
 369 01ca 8091 E800 		lds r24,232
 370 01ce 877F      		andi r24,lo8(-9)
 371 01d0 8093 E800 		sts 232,r24
 372               	.LBE72:
 373               	.LBE71:
 108:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				Endpoint_ClearStatusStage();
 374               		.loc 1 108 0
 375 01d4 0E94 0000 		call Endpoint_ClearStatusStage
 376               	.LVL20:
 110:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
 377               		.loc 1 110 0
 378 01d8 9091 0000 		lds r25,USB_ControlRequest+2
 379 01dc 81E0      		ldi r24,lo8(1)
 380 01de 9111      		cpse r25,__zero_reg__
 381 01e0 00C0      		rjmp .L13
 382 01e2 80E0      		ldi r24,0
 383               	.L13:
 384 01e4 F701      		movw r30,r14
 385 01e6 8087      		std Z+8,r24
 386 01e8 00C0      		rjmp .L1
 387               	.L7:
 115:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE)
 388               		.loc 1 115 0
 389 01ea 8091 0000 		lds r24,USB_ControlRequest
 390 01ee 8132      		cpi r24,lo8(33)
 391 01f0 01F4      		brne .L1
 392               	.LBB73:
 393               	.LBB74:
 508:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 394               		.loc 2 508 0
 395 01f2 8091 E800 		lds r24,232
 396 01f6 877F      		andi r24,lo8(-9)
 397 01f8 8093 E800 		sts 232,r24
 398               	.LBE74:
 399               	.LBE73:
 118:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				Endpoint_ClearStatusStage();
 400               		.loc 1 118 0
 401 01fc 0E94 0000 		call Endpoint_ClearStatusStage
 402               	.LVL21:
 120:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
 403               		.loc 1 120 0
 404 0200 8091 0000 		lds r24,USB_ControlRequest+2
 405 0204 9091 0000 		lds r25,USB_ControlRequest+2+1
 406 0208 8827      		clr r24
 407 020a 36E0      		ldi r19,6
 408               		1:
 409 020c 9695      		lsr r25
 410 020e 8795      		ror r24
 411 0210 3A95      		dec r19
 412 0212 01F4      		brne 1b
 413 0214 F701      		movw r30,r14
 414 0216 9287      		std Z+10,r25
 415 0218 8187      		std Z+9,r24
 416 021a 00C0      		rjmp .L1
 417               	.L4:
 125:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE)
 418               		.loc 1 125 0
 419 021c 8091 0000 		lds r24,USB_ControlRequest
 420 0220 813A      		cpi r24,lo8(-95)
 421 0222 01F4      		brne .L1
 422               	.LBB75:
 423               	.LBB76:
 508:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 424               		.loc 2 508 0
 425 0224 8091 E800 		lds r24,232
 426 0228 877F      		andi r24,lo8(-9)
 427 022a 8093 E800 		sts 232,r24
 428               	.L14:
 429               	.LBE76:
 430               	.LBE75:
 431               	.LBB77:
 432               	.LBB78:
 471:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 433               		.loc 2 471 0 discriminator 1
 434 022e 8091 E800 		lds r24,232
 435               	.LBE78:
 436               	.LBE77:
 128:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				while (!(Endpoint_IsINReady()));
 437               		.loc 1 128 0 discriminator 1
 438 0232 80FF      		sbrs r24,0
 439 0234 00C0      		rjmp .L14
 129:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
 440               		.loc 1 129 0
 441 0236 F701      		movw r30,r14
 442 0238 8185      		ldd r24,Z+9
 443 023a 9285      		ldd r25,Z+10
 444 023c 9695      		lsr r25
 445 023e 8795      		ror r24
 446 0240 9695      		lsr r25
 447 0242 8795      		ror r24
 448               	.L30:
 449               	.LBB79:
 450               	.LBB80:
 536:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 537:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << RXOUTI);
 538:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 539:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 540:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 541:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Stalls the current endpoint, indicating to the host that a logical problem occurred with the
 542:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  indicated endpoint and that the current transfer sequence should be aborted. This provides a
 543:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  way for devices to indicate invalid commands to the host so that the current transfer can be
 544:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  aborted and the host can begin its own recovery sequence.
 545:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 546:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  The currently selected endpoint remains stalled until either the \ref Endpoint_ClearStall() 
 547:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is called, or the host issues a CLEAR FEATURE request to the device for the currently select
 548:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint.
 549:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 550:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 551:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 552:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
 553:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void)
 554:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 555:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQ);
 556:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 557:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 558:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears the STALL condition on the currently selected endpoint.
 559:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 560:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 561:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 562:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
 563:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void)
 564:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 565:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQC);
 566:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 567:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 568:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is stalled, false otherwise.
 569:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 570:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 571:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 572:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
 573:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 574:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 575:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void)
 576:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 577:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << STALLRQ)) ? true : false);
 578:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 579:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 580:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the data toggle of the currently selected endpoint. */
 581:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
 582:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void)
 583:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 584:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << RSTDT);
 585:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 586:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 587:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines the currently selected endpoint's direction.
 588:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 589:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
 590:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 591:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_IN
 592:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void)
 593:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 594:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 595:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 596:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 597:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sets the direction of the currently selected endpoint.
 598:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 599:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
 600:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 601:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE
 602:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
 603:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 604:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
 605:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 606:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 607:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Reads one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 608:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 609:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 610:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 611:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
 612:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 613:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 614:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void)
 615:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 616:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEDATX;
 617:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 618:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 619:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Writes one byte to the currently selected endpoint's bank, for IN direction endpoints.
 620:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 621:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 622:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 623:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
 624:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 625:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
 626:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data)
 627:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 628:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = Data;
 451               		.loc 2 628 0
 452 0244 8093 F100 		sts 241,r24
 453               	.LBE80:
 454               	.LBE79:
 455               	.LBB81:
 456               	.LBB82:
 520:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 457               		.loc 2 520 0
 458 0248 8091 E800 		lds r24,232
 459 024c 8E77      		andi r24,lo8(126)
 460 024e 8093 E800 		sts 232,r24
 461               	.LBE82:
 462               	.LBE81:
 131:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 				Endpoint_ClearStatusStage();
 463               		.loc 1 131 0
 464 0252 0E94 0000 		call Endpoint_ClearStatusStage
 465               	.LVL22:
 466               	.L1:
 467               		.loc 1 136 0
 468 0256 0FB6      		in __tmp_reg__,__SREG__
 469 0258 F894      		cli
 470 025a BEBE      		out __SP_H__,r11
 471 025c 0FBE      		out __SREG__,__tmp_reg__
 472 025e ADBE      		out __SP_L__,r10
 473               	/* epilogue start */
 474 0260 0F90      		pop __tmp_reg__
 475 0262 0F90      		pop __tmp_reg__
 476 0264 0F90      		pop __tmp_reg__
 477 0266 DF91      		pop r29
 478 0268 CF91      		pop r28
 479 026a 1F91      		pop r17
 480 026c 0F91      		pop r16
 481 026e FF90      		pop r15
 482 0270 EF90      		pop r14
 483               	.LVL23:
 484 0272 DF90      		pop r13
 485 0274 CF90      		pop r12
 486 0276 BF90      		pop r11
 487 0278 AF90      		pop r10
 488 027a 9F90      		pop r9
 489 027c 8F90      		pop r8
 490 027e 7F90      		pop r7
 491 0280 6F90      		pop r6
 492 0282 0895      		ret
 493               		.cfi_endproc
 494               	.LFE99:
 496               		.section	.text.HID_Device_ConfigureEndpoints,"ax",@progbits
 497               	.global	HID_Device_ConfigureEndpoints
 499               	HID_Device_ConfigureEndpoints:
 500               	.LFB100:
 137:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 
 138:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
 139:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** {
 501               		.loc 1 139 0
 502               		.cfi_startproc
 503               	.LVL24:
 504 0000 CF93      		push r28
 505               	.LCFI16:
 506               		.cfi_def_cfa_offset 3
 507               		.cfi_offset 28, -2
 508 0002 DF93      		push r29
 509               	.LCFI17:
 510               		.cfi_def_cfa_offset 4
 511               		.cfi_offset 29, -3
 512               	/* prologue: function */
 513               	/* frame size = 0 */
 514               	/* stack size = 2 */
 515               	.L__stack_usage = 2
 516 0004 FC01      		movw r30,r24
 140:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
 517               		.loc 1 140 0
 518 0006 0896      		adiw r24,8
 519               	.LVL25:
 520 0008 DC01      		movw r26,r24
 521 000a 85E0      		ldi r24,lo8(5)
 522 000c ED01      		movw r28,r26
 523               		0:
 524 000e 1992      		st Y+,__zero_reg__
 525 0010 8A95      		dec r24
 526 0012 01F4      		brne 0b
 141:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 	HIDInterfaceInfo->State.UsingReportProtocol = true;
 527               		.loc 1 141 0
 528 0014 81E0      		ldi r24,lo8(1)
 529 0016 8087      		std Z+8,r24
 142:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 	HIDInterfaceInfo->State.IdleCount           = 500;
 530               		.loc 1 142 0
 531 0018 84EF      		ldi r24,lo8(-12)
 532 001a 91E0      		ldi r25,lo8(1)
 533 001c 9287      		std Z+10,r25
 534 001e 8187      		std Z+9,r24
 143:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 
 144:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 	if (!(Endpoint_ConfigureEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber, EP_TYPE_INTERRUP
 535               		.loc 1 144 0
 536 0020 8481      		ldd r24,Z+4
 537 0022 8823      		tst r24
 538 0024 01F0      		breq .L35
 539 0026 44E0      		ldi r20,lo8(4)
 540 0028 00C0      		rjmp .L32
 541               	.L35:
 542 002a 40E0      		ldi r20,0
 543               	.L32:
 544               		.loc 1 144 0 is_stmt 0 discriminator 3
 545 002c 6281      		ldd r22,Z+2
 546 002e 7381      		ldd r23,Z+3
 547 0030 8181      		ldd r24,Z+1
 548               	.LVL26:
 127:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint16_t CheckBytes = 8;
 549               		.loc 2 127 0 is_stmt 1 discriminator 3
 550 0032 28E0      		ldi r18,lo8(8)
 551 0034 30E0      		ldi r19,0
 126:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t  MaskVal    = 0;
 552               		.loc 2 126 0 discriminator 3
 553 0036 90E0      		ldi r25,0
 554 0038 00C0      		rjmp .L33
 555               	.LVL27:
 556               	.L34:
 557               	.LBB83:
 558               	.LBB84:
 559               	.LBB85:
 560               	.LBB86:
 131:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					MaskVal++;
 561               		.loc 2 131 0
 562 003a 9F5F      		subi r25,lo8(-(1))
 563               	.LVL28:
 132:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					CheckBytes <<= 1;
 564               		.loc 2 132 0
 565 003c 220F      		lsl r18
 566 003e 331F      		rol r19
 567               	.LVL29:
 568               	.L33:
 129:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (CheckBytes < Bytes)
 569               		.loc 2 129 0
 570 0040 2617      		cp r18,r22
 571 0042 3707      		cpc r19,r23
 572 0044 00F0      		brlo .L34
 573               	.LBE86:
 574               	.LBE85:
 280:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 
 575               		.loc 2 280 0
 576 0046 4260      		ori r20,lo8(2)
 577               	.LVL30:
 578               	.LBB88:
 579               	.LBB87:
 135:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (MaskVal << EPSIZE0);
 580               		.loc 2 135 0
 581 0048 9295      		swap r25
 582               	.LVL31:
 583 004a 907F      		andi r25,lo8(-16)
 584               	.LBE87:
 585               	.LBE88:
 280:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 
 586               		.loc 2 280 0
 587 004c 492B      		or r20,r25
 588 004e 61EC      		ldi r22,lo8(-63)
 589               	.LVL32:
 590               	/* epilogue start */
 591               	.LBE84:
 592               	.LBE83:
 145:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 									 ENDPOINT_DIR_IN, HIDInterfaceInfo->Config.ReportINEndpointSize,
 146:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 									 HIDInterfaceInfo->Config.ReportINEndpointDoubleBank ? ENDPOINT_BANK_DOUBLE : ENDPOINT_BAN
 147:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 	{
 148:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 		return false;
 149:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 	}
 150:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 
 151:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 	return true;
 152:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** }
 593               		.loc 1 152 0
 594 0050 DF91      		pop r29
 595 0052 CF91      		pop r28
 596               	.LBB90:
 597               	.LBB89:
 280:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 
 598               		.loc 2 280 0
 599 0054 0C94 0000 		jmp Endpoint_ConfigureEndpoint_Prv
 600               	.LVL33:
 601               	.LBE89:
 602               	.LBE90:
 603               		.cfi_endproc
 604               	.LFE100:
 606               		.section	.text.HID_Device_USBTask,"ax",@progbits
 607               	.global	HID_Device_USBTask
 609               	HID_Device_USBTask:
 610               	.LFB101:
 153:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 
 154:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
 155:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** {
 611               		.loc 1 155 0
 612               		.cfi_startproc
 613               	.LVL34:
 614 0000 4F92      		push r4
 615               	.LCFI18:
 616               		.cfi_def_cfa_offset 3
 617               		.cfi_offset 4, -2
 618 0002 5F92      		push r5
 619               	.LCFI19:
 620               		.cfi_def_cfa_offset 4
 621               		.cfi_offset 5, -3
 622 0004 6F92      		push r6
 623               	.LCFI20:
 624               		.cfi_def_cfa_offset 5
 625               		.cfi_offset 6, -4
 626 0006 7F92      		push r7
 627               	.LCFI21:
 628               		.cfi_def_cfa_offset 6
 629               		.cfi_offset 7, -5
 630 0008 8F92      		push r8
 631               	.LCFI22:
 632               		.cfi_def_cfa_offset 7
 633               		.cfi_offset 8, -6
 634 000a 9F92      		push r9
 635               	.LCFI23:
 636               		.cfi_def_cfa_offset 8
 637               		.cfi_offset 9, -7
 638 000c AF92      		push r10
 639               	.LCFI24:
 640               		.cfi_def_cfa_offset 9
 641               		.cfi_offset 10, -8
 642 000e BF92      		push r11
 643               	.LCFI25:
 644               		.cfi_def_cfa_offset 10
 645               		.cfi_offset 11, -9
 646 0010 CF92      		push r12
 647               	.LCFI26:
 648               		.cfi_def_cfa_offset 11
 649               		.cfi_offset 12, -10
 650 0012 DF92      		push r13
 651               	.LCFI27:
 652               		.cfi_def_cfa_offset 12
 653               		.cfi_offset 13, -11
 654 0014 EF92      		push r14
 655               	.LCFI28:
 656               		.cfi_def_cfa_offset 13
 657               		.cfi_offset 14, -12
 658 0016 FF92      		push r15
 659               	.LCFI29:
 660               		.cfi_def_cfa_offset 14
 661               		.cfi_offset 15, -13
 662 0018 0F93      		push r16
 663               	.LCFI30:
 664               		.cfi_def_cfa_offset 15
 665               		.cfi_offset 16, -14
 666 001a 1F93      		push r17
 667               	.LCFI31:
 668               		.cfi_def_cfa_offset 16
 669               		.cfi_offset 17, -15
 670 001c CF93      		push r28
 671               	.LCFI32:
 672               		.cfi_def_cfa_offset 17
 673               		.cfi_offset 28, -16
 674 001e DF93      		push r29
 675               	.LCFI33:
 676               		.cfi_def_cfa_offset 18
 677               		.cfi_offset 29, -17
 678 0020 00D0      		rcall .
 679 0022 1F92      		push __zero_reg__
 680               	.LCFI34:
 681               		.cfi_def_cfa_offset 21
 682 0024 CDB7      		in r28,__SP_L__
 683 0026 DEB7      		in r29,__SP_H__
 684               	.LCFI35:
 685               		.cfi_def_cfa_register 28
 686               	/* prologue: function */
 687               	/* frame size = 3 */
 688               	/* stack size = 19 */
 689               	.L__stack_usage = 19
 690 0028 7C01      		movw r14,r24
 156:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 	if (USB_DeviceState != DEVICE_STATE_Configured)
 157:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 	  return;
 158:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 
 159:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
 160:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 
 161:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 	if (Endpoint_IsReadWriteAllowed())
 162:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 	{
 163:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
 164:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 		uint8_t  ReportID     = 0;
 165:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 		uint16_t ReportINSize = 0;
 166:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 
 167:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 		memset(ReportINData, 0, sizeof(ReportINData));
 168:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 
 169:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REP
 170:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 		                                                             ReportINData, &ReportINSize);
 171:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 		bool StatesChanged     = false;
 172:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRe
 173:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 
 174:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
 175:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 		{
 176:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize)
 177:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevR
 178:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 		}
 179:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 
 180:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
 181:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 		{
 182:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
 183:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 
 184:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
 185:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 
 186:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 			if (ReportID)
 187:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 			  Endpoint_Write_8(ReportID);
 188:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 
 189:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
 190:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 
 191:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 			Endpoint_ClearIN();
 192:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 		}
 193:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 	}
 194:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** }
 691               		.loc 1 194 0
 692 002a ADB6      		in r10,__SP_L__
 693 002c BEB6      		in r11,__SP_H__
 156:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 	if (USB_DeviceState != DEVICE_STATE_Configured)
 694               		.loc 1 156 0
 695 002e 8EB3      		in r24,0x1e
 696               	.LVL35:
 697 0030 8430      		cpi r24,lo8(4)
 698 0032 01F0      		breq .+2
 699 0034 00C0      		rjmp .L36
 159:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
 700               		.loc 1 159 0
 701 0036 F701      		movw r30,r14
 702 0038 8181      		ldd r24,Z+1
 703               	.LVL36:
 704               	.LBB91:
 705               	.LBB92:
 334:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = EndpointNumber;
 706               		.loc 2 334 0
 707 003a 8093 E900 		sts 233,r24
 708               	.LBE92:
 709               	.LBE91:
 710               	.LBB93:
 711               	.LBB94:
 424:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 712               		.loc 2 424 0
 713 003e 8091 E800 		lds r24,232
 714               	.LVL37:
 715               	.LBE94:
 716               	.LBE93:
 161:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 	if (Endpoint_IsReadWriteAllowed())
 717               		.loc 1 161 0
 718 0042 85FF      		sbrs r24,5
 719 0044 00C0      		rjmp .L36
 720 0046 6DB6      		in r6,__SP_L__
 721 0048 7EB6      		in r7,__SP_H__
 722               	.LVL38:
 723               	.LBB95:
 163:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
 724               		.loc 1 163 0
 725 004a 4781      		ldd r20,Z+7
 726 004c 8DB7      		in r24,__SP_L__
 727 004e 9EB7      		in r25,__SP_H__
 728 0050 841B      		sub r24,r20
 729 0052 9109      		sbc r25,__zero_reg__
 730 0054 0FB6      		in __tmp_reg__,__SREG__
 731 0056 F894      		cli
 732 0058 9EBF      		out __SP_H__,r25
 733 005a 0FBE      		out __SREG__,__tmp_reg__
 734 005c 8DBF      		out __SP_L__,r24
 735 005e CDB6      		in r12,__SP_L__
 736 0060 DEB6      		in r13,__SP_H__
 737 0062 EFEF      		ldi r30,-1
 738 0064 CE1A      		sub r12,r30
 739 0066 DE0A      		sbc r13,r30
 164:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 		uint8_t  ReportID     = 0;
 740               		.loc 1 164 0
 741 0068 1B82      		std Y+3,__zero_reg__
 742               	.LVL39:
 165:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 		uint16_t ReportINSize = 0;
 743               		.loc 1 165 0
 744 006a 1A82      		std Y+2,__zero_reg__
 745 006c 1982      		std Y+1,__zero_reg__
 746               	.LVL40:
 167:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 		memset(ReportINData, 0, sizeof(ReportINData));
 747               		.loc 1 167 0
 748 006e 4601      		movw r8,r12
 749 0070 50E0      		ldi r21,0
 750 0072 60E0      		ldi r22,0
 751 0074 70E0      		ldi r23,0
 752 0076 C601      		movw r24,r12
 753 0078 0E94 0000 		call memset
 754               	.LVL41:
 169:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REP
 755               		.loc 1 169 0
 756 007c 8E01      		movw r16,r28
 757 007e 0F5F      		subi r16,-1
 758 0080 1F4F      		sbci r17,-1
 759 0082 9601      		movw r18,r12
 760 0084 40E0      		ldi r20,0
 761 0086 BE01      		movw r22,r28
 762 0088 6D5F      		subi r22,-3
 763 008a 7F4F      		sbci r23,-1
 764 008c C701      		movw r24,r14
 765 008e 0E94 0000 		call CALLBACK_HID_Device_CreateHIDReport
 766               	.LVL42:
 767 0092 482E      		mov r4,r24
 768               	.LVL43:
 172:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRe
 769               		.loc 1 172 0
 770 0094 F701      		movw r30,r14
 771 0096 2185      		ldd r18,Z+9
 772 0098 3285      		ldd r19,Z+10
 773 009a 232B      		or r18,r19
 774 009c 01F0      		breq .L47
 172:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRe
 775               		.loc 1 172 0 is_stmt 0 discriminator 1
 776 009e 01E0      		ldi r16,lo8(1)
 777 00a0 10E0      		ldi r17,0
 778 00a2 2385      		ldd r18,Z+11
 779 00a4 3485      		ldd r19,Z+12
 780 00a6 232B      		or r18,r19
 781 00a8 01F0      		breq .L40
 782               	.L47:
 172:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRe
 783               		.loc 1 172 0
 784 00aa 00E0      		ldi r16,0
 785 00ac 10E0      		ldi r17,0
 786               	.L40:
 787               	.LVL44:
 174:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
 788               		.loc 1 174 0 is_stmt 1 discriminator 4
 789 00ae F701      		movw r30,r14
 790 00b0 C580      		ldd r12,Z+5
 791 00b2 D680      		ldd r13,Z+6
 792 00b4 C114      		cp r12,__zero_reg__
 793 00b6 D104      		cpc r13,__zero_reg__
 794 00b8 01F0      		breq .L48
 176:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize)
 795               		.loc 1 176 0
 796 00ba 4981      		ldd r20,Y+1
 797 00bc 5A81      		ldd r21,Y+2
 798 00be B601      		movw r22,r12
 799 00c0 C401      		movw r24,r8
 800 00c2 0E94 0000 		call memcmp
 801               	.LVL45:
 802 00c6 5524      		clr r5
 803 00c8 5394      		inc r5
 804 00ca 0097      		sbiw r24,0
 805 00cc 01F4      		brne .L43
 806 00ce 512C      		mov r5,__zero_reg__
 807               	.L43:
 808               	.LVL46:
 177:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevR
 809               		.loc 1 177 0
 810 00d0 F701      		movw r30,r14
 811 00d2 4781      		ldd r20,Z+7
 812 00d4 50E0      		ldi r21,0
 813 00d6 B401      		movw r22,r8
 814 00d8 C601      		movw r24,r12
 815 00da 0E94 0000 		call memcpy
 816               	.LVL47:
 817 00de 00C0      		rjmp .L42
 818               	.LVL48:
 819               	.L48:
 171:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 		bool StatesChanged     = false;
 820               		.loc 1 171 0
 821 00e0 512C      		mov r5,__zero_reg__
 822               	.LVL49:
 823               	.L42:
 180:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
 824               		.loc 1 180 0
 825 00e2 2981      		ldd r18,Y+1
 826 00e4 3A81      		ldd r19,Y+2
 827 00e6 232B      		or r18,r19
 828 00e8 01F0      		breq .L44
 180:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
 829               		.loc 1 180 0 is_stmt 0 discriminator 1
 830 00ea 4110      		cpse r4,__zero_reg__
 831 00ec 00C0      		rjmp .L45
 832 00ee 5110      		cpse r5,__zero_reg__
 833 00f0 00C0      		rjmp .L45
 834 00f2 00FF      		sbrs r16,0
 835 00f4 00C0      		rjmp .L44
 836               	.L45:
 182:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
 837               		.loc 1 182 0 is_stmt 1
 838 00f6 F701      		movw r30,r14
 839 00f8 2185      		ldd r18,Z+9
 840 00fa 3285      		ldd r19,Z+10
 841 00fc 3487      		std Z+12,r19
 842 00fe 2387      		std Z+11,r18
 184:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
 843               		.loc 1 184 0
 844 0100 8181      		ldd r24,Z+1
 845               	.LVL50:
 846               	.LBB96:
 847               	.LBB97:
 334:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = EndpointNumber;
 848               		.loc 2 334 0
 849 0102 8093 E900 		sts 233,r24
 850               	.LBE97:
 851               	.LBE96:
 186:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 			if (ReportID)
 852               		.loc 1 186 0
 853 0106 8B81      		ldd r24,Y+3
 854               	.LVL51:
 855 0108 8111      		cpse r24,__zero_reg__
 856               	.LVL52:
 857               	.LBB98:
 858               	.LBB99:
 859               		.loc 2 628 0
 860 010a 8093 F100 		sts 241,r24
 861               	.LVL53:
 862               	.L46:
 863               	.LBE99:
 864               	.LBE98:
 189:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.c **** 			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
 865               		.loc 1 189 0
 866 010e 6981      		ldd r22,Y+1
 867 0110 7A81      		ldd r23,Y+2
 868 0112 40E0      		ldi r20,0
 869 0114 50E0      		ldi r21,0
 870 0116 C401      		movw r24,r8
 871 0118 0E94 0000 		call Endpoint_Write_Stream_LE
 872               	.LVL54:
 873               	.LBB100:
 874               	.LBB101:
 520:lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 875               		.loc 2 520 0
 876 011c 8091 E800 		lds r24,232
 877 0120 8E77      		andi r24,lo8(126)
 878 0122 8093 E800 		sts 232,r24
 879               	.LVL55:
 880               	.L44:
 881 0126 862D      		mov r24,r6
 882 0128 972D      		mov r25,r7
 883 012a 0FB6      		in __tmp_reg__,__SREG__
 884 012c F894      		cli
 885 012e 9EBF      		out __SP_H__,r25
 886 0130 0FBE      		out __SREG__,__tmp_reg__
 887 0132 8DBF      		out __SP_L__,r24
 888               	.LVL56:
 889               	.L36:
 890               	.LBE101:
 891               	.LBE100:
 892               	.LBE95:
 893               		.loc 1 194 0
 894 0134 0FB6      		in __tmp_reg__,__SREG__
 895 0136 F894      		cli
 896 0138 BEBE      		out __SP_H__,r11
 897 013a 0FBE      		out __SREG__,__tmp_reg__
 898 013c ADBE      		out __SP_L__,r10
 899               	/* epilogue start */
 900 013e 0F90      		pop __tmp_reg__
 901 0140 0F90      		pop __tmp_reg__
 902 0142 0F90      		pop __tmp_reg__
 903 0144 DF91      		pop r29
 904 0146 CF91      		pop r28
 905 0148 1F91      		pop r17
 906 014a 0F91      		pop r16
 907 014c FF90      		pop r15
 908 014e EF90      		pop r14
 909               	.LVL57:
 910 0150 DF90      		pop r13
 911 0152 CF90      		pop r12
 912 0154 BF90      		pop r11
 913 0156 AF90      		pop r10
 914 0158 9F90      		pop r9
 915 015a 8F90      		pop r8
 916 015c 7F90      		pop r7
 917 015e 6F90      		pop r6
 918 0160 5F90      		pop r5
 919 0162 4F90      		pop r4
 920 0164 0895      		ret
 921               		.cfi_endproc
 922               	.LFE101:
 924               		.text
 925               	.Letext0:
 926               		.file 3 "/usr/lib/gcc/avr/4.7.0/../../../../avr/include/stdint.h"
 927               		.file 4 "/usr/lib/gcc/avr/4.7.0/include/stddef.h"
 928               		.file 5 "lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../StdRequestType.h"
 929               		.file 6 "lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../Device.h"
 930               		.file 7 "lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../Common/HIDClassCommon.h"
 931               		.file 8 "lufa-lib-svn/LUFA/Drivers/USB/Class/Device/HIDClassDevice.h"
 932               		.file 9 "lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/EndpointStream_AVR8.h"
 933               		.file 10 "/usr/lib/gcc/avr/4.7.0/../../../../avr/include/string.h"
 934               		.file 11 "lufa-lib-svn/LUFA/Drivers/USB/Class/Device/../../Core/USBTask.h"
DEFINED SYMBOLS
                            *ABS*:00000000 HIDClassDevice.c
     /tmp/cciXeCAg.s:2      *ABS*:0000003e __SP_H__
     /tmp/cciXeCAg.s:3      *ABS*:0000003d __SP_L__
     /tmp/cciXeCAg.s:4      *ABS*:0000003f __SREG__
     /tmp/cciXeCAg.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/cciXeCAg.s:6      *ABS*:00000001 __zero_reg__
     /tmp/cciXeCAg.s:13     .text.HID_Device_ProcessControlRequest:00000000 HID_Device_ProcessControlRequest
     /tmp/cciXeCAg.s:499    .text.HID_Device_ConfigureEndpoints:00000000 HID_Device_ConfigureEndpoints
     /tmp/cciXeCAg.s:609    .text.HID_Device_USBTask:00000000 HID_Device_USBTask

UNDEFINED SYMBOLS
USB_ControlRequest
memset
CALLBACK_HID_Device_CreateHIDReport
memcpy
Endpoint_Write_Control_Stream_LE
Endpoint_Read_Control_Stream_LE
CALLBACK_HID_Device_ProcessHIDReport
Endpoint_ClearStatusStage
Endpoint_ConfigureEndpoint_Prv
memcmp
Endpoint_Write_Stream_LE
